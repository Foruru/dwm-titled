diff --git a/config.def.h b/config.def.h
index 9efa774..2a73e2b 100644
--- a/config.def.h
+++ b/config.def.h
@@ -4,6 +4,7 @@
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
+static const int showwintitle       = 1;        /* 0 means no title */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
@@ -65,6 +66,7 @@ static const Key keys[] = {
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	{ MODKEY,                       XK_v,      togglewintitle, {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
 	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
@@ -113,3 +115,3 @@ static const Button buttons[] = {
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };
diff --git a/dwm.c b/dwm.c
index 1443802..d1414cc 100644
--- a/dwm.c
+++ b/dwm.c
@@ -96,6 +96,7 @@ struct Client {
 	Client *snext;
 	Monitor *mon;
 	Window win;
+	Window wintitle;
 };
 
 typedef struct {
@@ -122,6 +123,7 @@ struct Monitor {
 	unsigned int sellt;
 	unsigned int tagset[2];
 	int showbar;
+	int showwintitle;
 	int topbar;
 	Client *clients;
 	Client *sel;
@@ -161,6 +163,8 @@ static void detach(Client *c);
 static void detachstack(Client *c);
 static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
+static void redrawwintitle(void);
+static void drawwintitle(Client *c, int focus);
 static void drawbars(void);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
@@ -208,6 +212,7 @@ static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
+static void togglewintitle(const Arg *arg);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
@@ -217,6 +222,8 @@ static void unmanage(Client *c, int destroyed);
 static void unmapnotify(XEvent *e);
 static void updatebarpos(Monitor *m);
 static void updatebars(void);
+static void initwintitle(void);
+static void movewintitle(void);
 static void updateclientlist(void);
 static int updategeom(void);
 static void updatenumlockmask(void);
@@ -639,6 +646,7 @@ createmon(void)
 	m->mfact = mfact;
 	m->nmaster = nmaster;
 	m->showbar = showbar;
+	m->showwintitle = showwintitle;
 	m->topbar = topbar;
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
@@ -747,6 +755,28 @@ drawbar(Monitor *m)
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
 }
 
+void
+redrawwintitle()
+{
+	for (Client *c = selmon->clients; c; c = c->next)
+		if (c->tags & selmon->tagset[selmon->seltags] && selmon->sel && c->isfloating && selmon->showwintitle)
+			drawwintitle(c, 0);
+
+	if (selmon->sel)
+		drawwintitle(selmon->sel, 1);
+}
+
+void
+drawwintitle(Client *c, int focus)
+{
+	if (!selmon->showwintitle)
+		return;
+
+	drw_setscheme(drw, scheme[focus ? SchemeSel : SchemeNorm]);
+	drw_text(drw, 0, 0, c->w + borderpx * 2, bh, lrpad / 2, c->name, 0);
+	drw_map(drw, c->wintitle, 0, 0, c->w + borderpx * 2, bh);
+}
+
 void
 drawbars(void)
 {
@@ -1084,6 +1114,9 @@ manage(Window w, XWindowAttributes *wa)
 	c->mon->sel = c;
 	arrange(c->mon);
 	XMapWindow(dpy, c->win);
+	initwintitle();
+	movewintitle();
+	redrawwintitle();
 	focus(NULL);
 }
 
@@ -1199,6 +1232,9 @@ movemouse(const Arg *arg)
 		selmon = m;
 		focus(NULL);
 	}
+
+	movewintitle();
+	redrawwintitle();
 }
 
 Client *
@@ -1279,6 +1315,9 @@ resize(Client *c, int x, int y, int w, int h, int interact)
 {
 	if (applysizehints(c, &x, &y, &w, &h, interact))
 		resizeclient(c, x, y, w, h);
+
+	movewintitle();
+	redrawwintitle();
 }
 
 void
@@ -1361,6 +1400,7 @@ restack(Monitor *m)
 	XWindowChanges wc;
 
 	drawbar(m);
+	movewintitle();
 	if (!m->sel)
 		return;
 	if (m->sel->isfloating || !m->lt[m->sellt]->arrange)
@@ -1476,6 +1516,7 @@ setfocus(Client *c)
 			(unsigned char *) &(c->win), 1);
 	}
 	sendevent(c, wmatom[WMTakeFocus]);
+	drawwintitle(c, 1);
 }
 
 void
@@ -1711,6 +1752,15 @@ tile(Monitor *m)
 		}
 }
 
+void
+togglewintitle(const Arg *arg)
+{
+	selmon->showwintitle = !selmon->showwintitle;
+	movewintitle();
+	redrawwintitle();
+	arrange(selmon);
+}
+
 void
 togglebar(const Arg *arg)
 {
@@ -1766,6 +1816,7 @@ unfocus(Client *c, int setfocus)
 {
 	if (!c)
 		return;
+	drawwintitle(c, 0);
 	grabbuttons(c, 0);
 	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm][ColBorder].pixel);
 	if (setfocus) {
@@ -1780,6 +1831,8 @@ unmanage(Client *c, int destroyed)
 	Monitor *m = c->mon;
 	XWindowChanges wc;
 
+	XDestroyWindow(dpy, m->sel->wintitle);
+
 	detach(c);
 	detachstack(c);
 	if (!destroyed) {
@@ -2009,6 +2062,41 @@ updatestatus(void)
 	drawbar(selmon);
 }
 
+void
+movewintitle()
+{
+	for (Client *c = selmon->clients; c; c = c->next)
+		if (c->tags & selmon->tagset[selmon->seltags] && selmon->sel && c->isfloating && selmon->showwintitle) {
+			XMoveResizeWindow(dpy, c->wintitle, c->x, c->y - bh, c->w + c->bw * 2, bh);
+		} else {
+			XMoveResizeWindow(dpy, c->wintitle, 0, -bh, selmon->ww, bh);
+		}
+
+	if (selmon->sel) {
+		XMoveResizeWindow(dpy, selmon->sel->wintitle, selmon->sel->x, selmon->sel->y - bh, selmon->sel->w + selmon->sel->bw * 2, bh);
+		XRaiseWindow(dpy, selmon->sel->win);
+		XRaiseWindow(dpy, selmon->sel->wintitle);
+		if (selmon->sel->y < bh * 2)
+			XRaiseWindow(dpy, selmon->barwin);
+	}
+}
+
+void
+initwintitle()
+{
+	XSetWindowAttributes wa = {
+		.override_redirect = True,
+		.background_pixmap = ParentRelative,
+	};
+	XClassHint ch = {"dwm", "dwm"};
+	selmon->sel->wintitle = XCreateWindow(dpy, root, selmon->sel->x, selmon->sel->y - bh, selmon->sel->w + selmon->sel->bw * 2, bh, 0, DefaultDepth(dpy, screen),
+			CopyFromParent, DefaultVisual(dpy, screen),
+			CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
+	XDefineCursor(dpy, selmon->sel->wintitle, cursor[CurNormal]->cursor);
+	XMapRaised(dpy, selmon->sel->wintitle);
+	XSetClassHint(dpy, selmon->sel->wintitle, &ch);
+}
+
 void
 updatetitle(Client *c)
 {
